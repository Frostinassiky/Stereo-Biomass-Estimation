%%
% Optimization for stereo structures
% by Frost, @ VCC
clear; clc; close all

%% add toolbox
addpath('C:\Users\xum\Downloads\toolbox_calib\TOOLBOX_calib')

%% input
x0 = [7000, 0]; %parameters of current rig
%% two bonds
lb = [5000,-pi/4]; ub=[10000,pi/4];

%% Start with the default options
options = optimoptions('fmincon');
%% Modify options setting
options = optimoptions(options,'Display', 'off');
options = optimoptions(options,'MaxFunctionEvaluations', 6000);
options = optimoptions(options,'PlotFcn', { @optimplotfval });
options = optimoptions(options,'Algorithm', 'active-set');
% [x,fval,exitflag,output,lambda,grad,hessian] = ...
%     fmincon(@(x)optfun(x),x0,[],[],[],[],lb,ub,@mycon,options);
problem = createOptimProblem('fmincon', ...
        'objective', @(x) optfun(x),   ...
        'x0',x0, 'lb',lb,'ub',ub,                                       ...
        'nonlcon', @(x) mycon(x),...
        'options',options);
ms = MultiStart;
[x,Fx] = run(ms,problem,50);

%% 
%% 
tr=x(2);
color1 = [127,201,127]/256;
color2 = [190,174,212]/256;
color3 =[253,192,134]/256;
title(['Geometric Pattern']);
ylabel('z (world coordinate, mm)')
xlabel('x (world coordinate, mm)')
scatter(B/2,0,'filled','MarkerFaceColor',color2);scatter(-B/2,0,'filled','MarkerFaceColor',color1);
%% views
% centre line
line([-B/2,-B/2+2000*sin(tr/2)],[0,0+2000*cos(tr/2)],'color',color1);
line([B/2,B/2-2000*sin(tr/2)],[0,0+2000*cos(tr/2)],'color',color2);
% bounds
line([-B/2,-B/2+16000*sin(tr/2+th/2)], [0,0+16000*cos(tr/2+th/2)],'color',color1);
line([B/2,B/2+16000*sin(-tr/2+th/2)],  [0,0+16000*cos(-tr/2+th/2)],'color',color2);
line([-B/2,-B/2+16000*sin(tr/2-th/2)],  [0,0+16000*cos(tr/2-th/2)],'color',color1);
line([B/2,B/2+16000*sin(-tr/2-th/2)],   [0,0+16000*cos(-tr/2-th/2)],'color',color2);
%% sharks
line([-L/2,-L/2],[0,1E4 ],'color',color3,'lineWidth',2);
line([L/2,L/2],[0,1E4 ],'color',color3,'lineWidth',2);
%% optfun
% x is 2*1 array. First is the distance, next is the raletive angle in
% degree
function value = optfun(x) 
    tr = x(2);
    load('inPara.mat')
    [xL,xR,~,flag] = stereo_triangulation_1([-L/2;0;x(1)],[0; tr; 0 ],...
        B*[-cos(tr/2); 0; sin(tr/2) ],fc_left,cc_left,kc_left,0,fc_right,cc_right,kc_right,0);
    if flag ==0
        value = d_stereo_triangulation(xL(1),xL(2),xR(1),xR(2),[0; tr; 0 ],...
            B*[-cos(tr/2); 0; sin(tr/2) ], fc_left,cc_left,kc_left,0,fc_right,cc_right,kc_right,0);
    else 
        value = 9999;
    end
end

%% optcon
function [c,ceq] = mycon(x)
    c = optc(x);      % Compute nonlinear inequalities at x.
    ceq = optceq(x);  % Compute nonlinear equalities at x.
end 

function neg = optc(x) 
    tr = x(2);
    load('inPara.mat')
    % head should in the view
    [xL,xR,~,flag] = stereo_triangulation_1([-L/2;0;x(1)],[0; tr; 0 ],...
        B*[-cos(tr/2); 0; sin(tr/2) ],fc_left,cc_left,kc_left,0,fc_right,cc_right,kc_right,0);    
    neg = [ -(2*flag+1)];
    % tail should in the view
    [xL,xR,~,flag] = stereo_triangulation_1([L/2;0;x(1)],[0; tr; 0 ],...
        B*[-cos(tr/2); 0; sin(tr/2) ],fc_left,cc_left,kc_left,0,fc_right,cc_right,kc_right,0);    
    neg = [neg; -(2*flag+1)];
end

function zer = optceq( x ) 
    zer = 0;
end